

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_9 = Integer(9); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_18 = Integer(18); _sage_const_20 = Integer(20); _sage_const_34 = Integer(34); _sage_const_36 = Integer(36); _sage_const_40 = Integer(40); _sage_const_8 = Integer(8); _sage_const_11 = Integer(11); _sage_const_6 = Integer(6); _sage_const_1000 = Integer(1000); _sage_const_100 = Integer(100)
GL4 = GL(_sage_const_4 ,GF(_sage_const_2 ))
P = PolynomialRing (GF(_sage_const_2 ) ,order ='degrevlex', names=('x', 'y', 'z', 't',)); (x, y, z, t,) = P._first_ngens(4)
import numpy as np

list_poly_gens = [x,y,z,t]


print(len(GL4))
def transform_base(base, G):
    new_base = []
    for i in range(len(base)):
        for j in range((len(base))):
            if G[i][j] == _sage_const_1 :
                if len(new_base) < i + _sage_const_1 :
                    new_base.append(base[j])
                else:
                    new_base[-_sage_const_1 ] += base[j]
    return new_base


def read_file(filename):
    with open(filename, 'rb') as f:
        data = f.readlines()
    data = [x.strip() for x in data]
    return data


def construct_ideal(MNF_set_bin, IDCM_bin, test,m,n):
    p = m - n
    list_monomials = []
    for k in range(n):
        P = _sage_const_0 
        for l in range(p):
            if (IDCM_bin[k] >> l) & _sage_const_1 :
                P += test[p-l-_sage_const_1 ]
        list_monomials.append(P)
    list_monomials += test
    # print(list_monomials)
    L = []
    for MNF_bin in MNF_set_bin:
        P = _sage_const_1 
        for l in range(m):
            if (MNF_bin >> l) & _sage_const_1 :
                P *= list_monomials[l]
        L.append(P)
    L_ideal = Ideal(L)
    GB = L_ideal.groebner_basis()
    return GB

Hexagon_MNF = [_sage_const_5 , _sage_const_9 , _sage_const_10 , _sage_const_17 , _sage_const_18 , _sage_const_20 , _sage_const_34 , _sage_const_36 , _sage_const_40 ]
IDCM_1=[_sage_const_10 ,_sage_const_5 ,_sage_const_8 ,_sage_const_4 ,_sage_const_2 ,_sage_const_1 ]
IDCM_2=[_sage_const_11 ,_sage_const_5 ,_sage_const_8 ,_sage_const_4 ,_sage_const_2 ,_sage_const_1 ]
GB_1 = construct_ideal(Hexagon_MNF,IDCM_1,list_poly_gens,_sage_const_6 ,_sage_const_2 )
for k in range(len(GL4)):
    if k%_sage_const_1000 ==_sage_const_0 :
        print((k/len(GL4))*_sage_const_100 ,'%')
    G=GL4[k].list()
    new_base=transform_base(list_poly_gens, G)
    GB_2 = construct_ideal(Hexagon_MNF, IDCM_2, new_base,_sage_const_6 ,_sage_const_2 )
    if GB_1 == GB_2:
        print(G)
        isom = True
        break
print("finished")

